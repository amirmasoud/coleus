version: "3"

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: ../deploy/frontend/Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
    container_name: negarin-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    working_dir: /var/www/frontend
    networks:
      - frontend-network

  backend:
    build:
      context: ../backend
      args:
        FPM_VERSION: ${FPM_VERSION}
      dockerfile: ../deploy/backend/Dockerfile
    container_name: negarin-backend
    restart: unless-stopped
    ports:
      - "9000:9000"
    working_dir: /var/www/backend
    depends_on:
      - database
      - redis
    volumes:
      - ../backend:/var/www/backend
      - ../deploy/backend/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ../deploy/backend/php/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
    networks:
      - backend-network

  database:
    image: postgres:${PGSQL_VERSION}
    container_name: negarin-database
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./database/data:/var/lib/postgresql/data
    networks:
      - backend-network

  graphql-engine:
    image: hasura/graphql-engine:v1.1.0
    container_name: negarin-graphql-engine
    ports:
      - "8180:8180"
    depends_on:
      - "database"
    restart: unless-stopped
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:@database:5432/negarin
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    networks:
      - backend-network

  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: negarin-nginx
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    volumes:
      - ./nginx/certs/:/etc/ssl/certs/
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ../backend:/var/www/backend
      - ../frontend:/var/www/frontend
      - ./nginx/log/:/var/log/nginx/
    depends_on:
      - frontend
      - backend
    networks:
      - backend-network
      - frontend-network

  redis:
    image: redis:${REDIS_VERSION}
    container_name: negarin-redis
    command: ["redis-server"]
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network

  elasticsearch:
    image: elasticsearch:7.5.2
    container_name: negarin-elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend-network

  minio:
    image: minio/minio
    container_name: negarin-minio
    hostname: minio
    restart: unless-stopped
    volumes:
      - ../storage:/data
      - minio:/root/.minio
    ports:
      - "9001:9000"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_DOMAIN=${MINIO_PUBLIC_URL}
      - MINIO_BROWSER=${MINIO_BROWSER}
      - MINIO_REGION=us-east-1
    command: [ "server", "/data"]
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  rabbitmq:
    image: rabbitmq:3.8.2-management-alpine
    container_name: negarin_rabbitmq
    restart: unless-stopped
    volumes:
      - ./rabbitmq/etc/:/etc/rabbitmq/
      - ./rabbitmq/data/:/var/lib/rabbitmq/mnesia/
      - ./rabbitmq/logs/:/var/log/rabbitmq/
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - backend-network

  imaginary:
    image: darthsim/imgproxy:latest
    container_name: negarin_image
    restart: unless-stopped
    environment:
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      IMGPROXY_SIGNATURE_SIZE: ${IMGPROXY_SIGNATURE_SIZE}
      IMGPROXY_QUALITY: ${IMGPROXY_QUALITY}
      IMGPROXY_GZIP_COMPRESSION: ${IMGPROXY_GZIP_COMPRESSION}
      IMGPROXY_JPEG_PROGRESSIVE: ${IMGPROXY_JPEG_PROGRESSIVE}
      IMGPROXY_SENTRY_DSN: ${IMGPROXY_SENTRY_DSN}
      IMGPROXY_SENTRY_ENVIRONMENT: ${IMGPROXY_SENTRY_ENVIRONMENT}
      IMGPROXY_SENTRY_RELEASE: ${IMGPROXY_SENTRY_RELEASE}
      IMGPROXY_USE_S3: ${IMGPROXY_USE_S3}
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /opt
      IMGPROXY_S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_REGION: us-east-1
    ports:
      - "8080:8080"
    volumes:
      - ../storage:/opt
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  data:
  redis-data:
  storage:
  minio:
