version: "3"

services:
  # frontend:
  #   image: frontend:1.0.0
  #   build:
  #     context: ../frontend
  #     dockerfile: ../deploy/frontend/Dockerfile
  #     args:
  #       - NODE_VERSION=${NODE_VERSION}
  #   container_name: coleus-frontend
  #   restart: unless-stopped
  #   ports:
  #     - 3000:3000
  #   working_dir: /var/www/frontend
  #   networks:
  #     - frontend-network

  backend:
    image: backend:${BACKEND_TAG}
    build:
      context: ../../backend
      args:
        FPM_VERSION: ${FPM_VERSION}
        BACKEND_PORT: ${BACKEND_PORT}
      dockerfile: ../deploy/prod/backend/Dockerfile
    container_name: coleus-backend
    restart: unless-stopped
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    working_dir: /var/www/backend
    depends_on:
      - database
      - cache
    volumes:
      - ../../backend:/var/www/backend
      - ./backend/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./backend/php/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
    networks:
      - backend-network

  database:
    image: postgres:${PGSQL_VERSION}
    container_name: coleus-database
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./database/data:/var/lib/postgresql/data
    networks:
      - backend-network

  graphql:
    image: hasura/graphql-engine:v1.1.0
    container_name: coleus-graphql
    ports:
      - 8180:8180
    depends_on:
      - database
    restart: unless-stopped
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:@database:5432/coleus
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
    networks:
      - backend-network

  proxy:
    image: nginx:${NGINX_VERSION}
    container_name: coleus-proxy
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - ./nginx/certs/:/etc/ssl/certs/
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./nginx/log/:/var/log/nginx/
    depends_on:
      # - frontend
      - backend
    networks:
      - backend-network
      # - frontend-network

  cache:
    image: redis:${REDIS_VERSION}
    container_name: coleus-cache
    command: ["redis-server"]
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    networks:
      - backend-network

  # search:
  #   image: elasticsearch:7.5.2
  #   container_name: coleus-search
  #   restart: unless-stopped
  #   environment:
  #     - discovery.type=single-node
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   networks:
  #     - backend-network

  storage:
    image: minio/minio
    container_name: coleus-storage
    restart: unless-stopped
    volumes:
      - ../../storage:/data
      - minio:/root/.minio
    ports:
      - 9001:9000
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_DOMAIN=${MINIO_PUBLIC_URL}
      - MINIO_BROWSER=${MINIO_BROWSER}
      - MINIO_REGION=us-east-1
    command: [ "server", "/data"]
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # broker:
  #   image: rabbitmq:3.8.2-management-alpine
  #   container_name: coleus-broker
  #   restart: unless-stopped
  #   volumes:
  #     - ./rabbitmq/etc/:/etc/rabbitmq/
  #     - ./rabbitmq/data/:/var/lib/rabbitmq/mnesia/
  #     - ./rabbitmq/logs/:/var/log/rabbitmq/
  #   environment:
  #     RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   networks:
  #     - backend-network

  image:
    image: darthsim/imgproxy:latest
    container_name: coleus-image
    restart: unless-stopped
    environment:
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      IMGPROXY_SIGNATURE_SIZE: ${IMGPROXY_SIGNATURE_SIZE}
      IMGPROXY_QUALITY: ${IMGPROXY_QUALITY}
      IMGPROXY_GZIP_COMPRESSION: ${IMGPROXY_GZIP_COMPRESSION}
      IMGPROXY_JPEG_PROGRESSIVE: ${IMGPROXY_JPEG_PROGRESSIVE}
      IMGPROXY_SENTRY_DSN: ${IMGPROXY_SENTRY_DSN}
      IMGPROXY_SENTRY_ENVIRONMENT: ${IMGPROXY_SENTRY_ENVIRONMENT}
      IMGPROXY_SENTRY_RELEASE: ${IMGPROXY_SENTRY_RELEASE}
      IMGPROXY_USE_S3: ${IMGPROXY_USE_S3}
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /opt
      IMGPROXY_S3_ENDPOINT: http://storage:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_REGION: us-east-1
    ports:
      - 8080:8080
    volumes:
      - ../../storage:/opt
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge
  # frontend-network:
  #   driver: bridge

volumes:
  data:
  redis-data:
  storage:
  minio:
