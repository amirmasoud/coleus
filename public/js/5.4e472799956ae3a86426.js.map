{"version":3,"sources":["webpack:///./resources/js/graphql/page.gql","webpack:///resources/js/pages/books/read.vue","webpack:///./resources/js/pages/books/read.vue"],"names":["doc","kind","definitions","operation","name","value","variableDefinitions","variable","type","directives","selectionSet","selections","arguments","loc","start","end","source","body","locationOffset","line","column","definitionRefs","findOperation","i","length","element","forEach","def","refs","Set","collectFragmentReferences","node","add","selection","module","exports","operationName","newDoc","hasOwnProperty","opRefs","allRefs","newRefs","size","prevRefs","refName","has","childRef","op","push","oneQuery","readvue_type_script_lang_js_","[object Object]","title","this","$t","props","firstId","Number","id","$route","params","page","apollo","query","__webpack_require__","$nextTick","$apollo","queries","refetch","component","Object","componentNormalizer","readvue_type_template_id_251d2aa6_","options","__file","__webpack_exports__"],"mappings":"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","file":"js/5.4e472799956ae3a86426.js","sourcesContent":["\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"FetchPageById\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Int\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"page\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"content\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":74}};\n    doc.loc.source = {\"body\":\"query FetchPageById($id: Int) {\\n  page(id: $id) {\\n    id\\n    content\\n  }\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set(opRefs);\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"FetchPageById\"] = oneQuery(doc, \"FetchPageById\");\n        \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/js/graphql/page.gql\n// module id = hNU6\n// module chunks = 5","<template>\n  <div v-if=\"page && ! this.$apollo.queries.page.loading\">\n    <div class=\"row\" v-html=\"page.content\"></div>\n  </div>\n  <div v-else class=\"my-4 text-center\"><img :src=\"'/svg-loaders/oval.svg'\" /></div>\n</template>\n\n<script>\nimport gql from 'graphql-tag'\n\nexport default {\n  metaInfo () {\n    return { title: this.$t('read_book') }\n  },\n\n  props: {\n    firstId: Number\n  },\n\n  data () {\n    return {\n      id: this.$route.params['page'],\n      page: null\n    }\n  },\n\n  apollo: {\n    page: {\n      query: require('~/graphql/page.gql'),\n      variables() {\n        return {\n          id: this.id || this.firstId\n        }\n      },\n    },\n  },\n\n  created () {\n    this.$nextTick(() => {\n      this.$apollo.queries.page.refetch()\n    });\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// resources/js/pages/books/read.vue","import { render, staticRenderFns } from \"./read.vue?vue&type=template&id=251d2aa6&\"\nimport script from \"./read.vue?vue&type=script&lang=js&\"\nexport * from \"./read.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"read.vue\"\nexport default component.exports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/js/pages/books/read.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}